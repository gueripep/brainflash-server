"""using uuids for ids

Revision ID: 2e3ebec31a33
Revises: 967e04df41ff
Create Date: 2025-08-17 10:36:13.358124

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2e3ebec31a33'
down_revision: Union[str, Sequence[str], None] = '967e04df41ff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Drop the foreign key constraint that is causing the issue.
    # The name comes directly from your error message: "flashcards_deck_id_fkey"
    op.drop_constraint('flashcards_deck_id_fkey', 'flashcards', type_='foreignkey')
    # Also drop the study_sessions -> flashcard_decks foreign key which references the same column
    # This prevents the "character varying and uuid" mismatch when changing the referenced column type.
    op.drop_constraint('study_sessions_deck_id_fkey', 'study_sessions', type_='foreignkey')
    # Drop FKs from tables that reference flashcards.id so we can alter flashcards.id safely.
    op.drop_constraint('flashcard_discussions_flashcard_id_fkey', 'flashcard_discussions', type_='foreignkey')
    op.drop_constraint('flashcard_final_cards_flashcard_id_fkey', 'flashcard_final_cards', type_='foreignkey')
    op.drop_constraint('flashcard_fsrs_flashcard_id_fkey', 'flashcard_fsrs', type_='foreignkey')

    # Step 2: Alter all necessary column types from VARCHAR to UUID.
    op.alter_column('flashcard_decks', 'id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='id::uuid')
    op.drop_index(op.f('ix_flashcard_decks_id'), table_name='flashcard_decks')

    op.alter_column('flashcards', 'id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='id::uuid')

    op.alter_column('flashcards', 'deck_id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='deck_id::uuid')

    op.alter_column('flashcard_discussions', 'flashcard_id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='flashcard_id::uuid')

    op.alter_column('flashcard_final_cards', 'flashcard_id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='flashcard_id::uuid')

    op.alter_column('flashcard_fsrs', 'flashcard_id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='flashcard_id::uuid') # Corrected from 'id::uuid'

    op.alter_column('study_sessions', 'id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=False,
                    postgresql_using='id::uuid')

    op.alter_column('study_sessions', 'deck_id',
                    existing_type=sa.VARCHAR(length=50),
                    type_=sa.UUID(),
                    existing_nullable=True,
                    postgresql_using='deck_id::uuid')

    # Step 3: Recreate the foreign key constraint now that both columns are UUIDs.
    op.create_foreign_key(
        'flashcards_deck_id_fkey', # Constraint name
        'flashcards',              # Source table
        'flashcard_decks',         # Remote table
        ['deck_id'],               # Local column(s)
        ['id']                     # Remote column(s)
    )
    # Recreate study_sessions -> flashcard_decks FK after both sides are UUIDs
    op.create_foreign_key(
        'study_sessions_deck_id_fkey',
        'study_sessions',
        'flashcard_decks',
        ['deck_id'],
        ['id']
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Drop the foreign key constraint before changing types.
    op.drop_constraint('flashcards_deck_id_fkey', 'flashcards', type_='foreignkey')

    # Step 2: Alter all column types back to VARCHAR.
    op.alter_column('study_sessions', 'deck_id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=True)
    op.alter_column('study_sessions', 'id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcards', 'deck_id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcards', 'id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcard_fsrs', 'flashcard_id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcard_final_cards', 'flashcard_id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcard_discussions', 'flashcard_id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)
    op.alter_column('flashcard_decks', 'id',
                    existing_type=sa.UUID(),
                    type_=sa.VARCHAR(length=50),
                    existing_nullable=False)

    # Recreate the index dropped in the upgrade.
    op.create_index(op.f('ix_flashcard_decks_id'), 'flashcard_decks', ['id'], unique=False)

    # Step 3: Recreate the original foreign key constraint.
    op.create_foreign_key(
        'flashcards_deck_id_fkey',
        'flashcards',
        'flashcard_decks',
        ['deck_id'],
        ['id']
    )
    # Recreate FKs that were dropped at the start of downgrade
    op.create_foreign_key(
        'flashcard_discussions_flashcard_id_fkey',
        'flashcard_discussions',
        'flashcards',
        ['flashcard_id'],
        ['id']
    )
    op.create_foreign_key(
        'flashcard_final_cards_flashcard_id_fkey',
        'flashcard_final_cards',
        'flashcards',
        ['flashcard_id'],
        ['id']
    )
    op.create_foreign_key(
        'flashcard_fsrs_flashcard_id_fkey',
        'flashcard_fsrs',
        'flashcards',
        ['flashcard_id'],
        ['id']
    )
    op.create_foreign_key(
        'study_sessions_deck_id_fkey',
        'study_sessions',
        'flashcard_decks',
        ['deck_id'],
        ['id']
    )
    # ### end Alembic commands ###